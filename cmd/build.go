package cmd

import (
	"bytes"
	"fmt"
	"github.com/lightningsdk/core/model"
	"os"
	"strings"
)

// this should include a function that is easy to call from the project that will
// build the autogenerated files before building the project
func GetAutogenerateCommand() model.Command {
	return model.Command{
		Function: Autognenerate,
		Help:     "generates the plugin registry file",
	}
}

// this builds the plugin registry file
func Autognenerate(a model.App) error {
	// create the contents
	fmt.Println("autogenerating ...")
	buf := bytes.NewBuffer([]byte{})
	buf.WriteString("package autogen\n\n")
	buf.WriteString("import (\n")
	// first add the coe
	buf.WriteString(fmt.Sprintf("\t\"%s\"\n", "github.com/lightningsdk/core"))
	p := a.GetPlugins()
	if len(p) > 0 {
		for k, _ := range p {
			fmt.Println(fmt.Sprintf("\tadding plugin: %s", k))
			buf.WriteString(fmt.Sprintf("\t\"%s\"\n", k))
		}
	}
	buf.WriteString(")\n\n")

	buf.WriteString("func GetPlugins(app *core.App) map[string]core.Plugin {\n")
	buf.WriteString("\tplugins := map[string]core.Plugin{}\n")
	for k, _ := range p {
		s := strings.Split(k, "/")
		pkg := s[len(s)-1]
		buf.WriteString(fmt.Sprintf("\tplugins[\"%s\"] = %s.NewPlugin(app)\n", k, pkg))
	}
	buf.WriteString("\treturn plugins\n")
	buf.WriteString("}\n")

	// write the file
	return os.WriteFile("./autogen/init_plugins.go", buf.Bytes(), 0644)
}
